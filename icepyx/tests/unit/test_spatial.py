from pathlib import Path
import re

import geopandas as gpd
import numpy as np
import pytest
from shapely.geometry import Polygon

import icepyx.core.spatial as spat

# ######### "Bounding Box" input tests ################################################################################
# (Note that these ALSO test the @property functions for the class for bounding boxes)


def test_intlist_bbox():
    """
    Bounding box test w/ a List of valid Int inputs.
    * tests that expected output is correct
    * tests that _ext_type is correct

    """
    # initialize Spatial object;
    # it should call validate_spatial function correctly

    intlist_bbox = spat.Spatial([-64, 66, -55, 72])
    assert intlist_bbox._ext_type == "bounding_box"
    assert intlist_bbox._geom_file is None
    assert intlist_bbox.extent == [-64, 66, -55, 72]


def test_floatlist_bbox():
    floatlist_bbox = spat.Spatial([-64.2, 66.2, -55.5, 72.5])
    assert floatlist_bbox._ext_type == "bounding_box"
    assert floatlist_bbox._geom_file is None
    assert floatlist_bbox.extent == [-64.2, 66.2, -55.5, 72.5]


def test_numpyfloatarray_bbox():
    npfloat_bbox = spat.Spatial(np.array([-64.2, 66.2, -55.5, 72.5]))
    assert npfloat_bbox._ext_type == "bounding_box"
    assert npfloat_bbox._geom_file is None
    assert npfloat_bbox.extent == [-64.2, 66.2, -55.5, 72.5]


def test_numpyfloatlist_bbox():
    npfloatlist_bbox = spat.Spatial(list(np.array([-64.2, 66.2, -55.5, 72.5])))
    assert npfloatlist_bbox._ext_type == "bounding_box"
    assert npfloatlist_bbox._geom_file is None
    assert npfloatlist_bbox.extent == [-64.2, 66.2, -55.5, 72.5]


def test_intlist_with0_bbox():
    npfloatlist_bbox = spat.Spatial(list(np.array([0, -80, 90, -60])))
    assert npfloatlist_bbox._ext_type == "bounding_box"
    assert npfloatlist_bbox._geom_file is None
    assert npfloatlist_bbox.extent == [0, -80, 90, -60]


# ########## Bounding Box Assertion Error tests #############################################
# (input for all of these tests is bad; ensuring the spatial class catches this)


def test_too_few_bbox_points():
    with pytest.raises(AssertionError):
        spat.Spatial([-64.2, 66.2, -55.5])


def test_too_many_bbox_points():
    with pytest.raises(AssertionError):
        spat.Spatial([-64.2, 66.2, -55.5, 72.5, 0])


def test_invalid_low_latitude_1_bbox():
    with pytest.raises(AssertionError):
        spat.Spatial([-64.2, -90.2, -55.5, 72.5])


def test_invalid_high_latitude_1_bbox():
    with pytest.raises(AssertionError):
        spat.Spatial([-64.2, 90.2, -55.5, 72.5])


def test_invalid_low_latitude_3_bbox():
    with pytest.raises(AssertionError):
        spat.Spatial([-64.2, 66.2, -55.5, -90.5])


def test_invalid_high_latitude_3_bbox():
    with pytest.raises(AssertionError):
        spat.Spatial([-64.2, 66.2, -55.5, 90.5])


def test_invalid_low_longitude_0_bbox():
    with pytest.raises(AssertionError):
        spat.Spatial([-180.2, 66.2, -55.5, 72.5])


def test_invalid_high_longitude_0_bbox():
    with pytest.raises(AssertionError):
        spat.Spatial([180.2, 66.2, -55.5, 72.5])


def test_invalid_low_longitude_2_bbox():
    with pytest.raises(AssertionError):
        spat.Spatial([-64.2, 66.2, -180.5, 72.5])


def test_invalid_high_longitude_2_bbox():
    with pytest.raises(AssertionError):
        spat.Spatial([-64.2, 66.2, 180.5, 72.5])


def test_same_sign_lowleft_gt_upright_latitude_bbox():
    with pytest.raises(AssertionError):
        spat.Spatial([-64.2, 72.5, -55.5, 66.2])


def test_bad_values_bbox():
    with pytest.raises(ValueError):
        spat.Spatial(["a", "b", "c", "d"])


# ############### END BOUNDING BOX TESTS ################################################################

# ######### "Polygon" input tests (NOT FROM FILE) ######################################################


def test_list_pairs_polygon():
    poly_list_pair = spat.Spatial(
        [[-55, 68], [-55, 71], [-48, 71], [-48, 68], [-55, 68]]
    )
    expected_poly_list_pair = [
        -55.0,
        68.0,
        -55.0,
        71.0,
        -48.0,
        71.0,
        -48.0,
        68.0,
        -55.0,
        68.0,
    ]

    assert poly_list_pair._ext_type == "polygon"
    assert poly_list_pair._geom_file is None
    assert poly_list_pair.extent == expected_poly_list_pair


def test_tuple_latlon_pairs():
    poly_tuple_pair = spat.Spatial(
        [(-55, 68), (-55, 71), (-48, 71), (-48, 68), (-55, 68)]
    )
    expected_poly_tuple_pair = [
        -55.0,
        68.0,
        -55.0,
        71.0,
        -48.0,
        71.0,
        -48.0,
        68.0,
        -55.0,
        68.0,
    ]

    assert poly_tuple_pair._ext_type == "polygon"
    assert poly_tuple_pair._geom_file is None
    assert poly_tuple_pair.extent == expected_poly_tuple_pair


def test_intlist_latlon_coords():
    poly_list = spat.Spatial([-55, 68, -55, 71, -48, 71, -48, 68, -55, 68])
    expected_poly_list = [
        -55.0,
        68.0,
        -55.0,
        71.0,
        -48.0,
        71.0,
        -48.0,
        68.0,
        -55.0,
        68.0,
    ]

    assert poly_list._ext_type == "polygon"
    assert poly_list._geom_file is None
    assert poly_list.extent == expected_poly_list


def test_floatlist_latlon_coords():
    poly_float_list = spat.Spatial(
        [-55.0, 68.7, -55.0, 71, -48, 71, -48, 68.7, -55.0, 68.7]
    )
    expected_poly_float_list = [
        -55.0,
        68.7,
        -55.0,
        71.0,
        -48.0,
        71.0,
        -48.0,
        68.7,
        -55.0,
        68.7,
    ]

    assert poly_float_list._ext_type == "polygon"
    assert poly_float_list._geom_file is None
    assert poly_float_list.extent == expected_poly_float_list


# numpy array tests


def test_numpy_list_pairs_polygon():
    poly_list_pair = spat.Spatial(
        np.array([[-55, 68], [-55, 71], [-48, 71], [-48, 68], [-55, 68]])
    )
    expected_poly_list_pair = [
        -55.0,
        68.0,
        -55.0,
        71.0,
        -48.0,
        71.0,
        -48.0,
        68.0,
        -55.0,
        68.0,
    ]

    assert poly_list_pair._ext_type == "polygon"
    assert poly_list_pair._geom_file is None
    assert poly_list_pair.extent == expected_poly_list_pair


def test_numpy_tuple_latlon_pairs():
    poly_tuple_pair = spat.Spatial(
        np.array([(-55, 68), (-55, 71), (-48, 71), (-48, 68), (-55, 68)])
    )
    expected_poly_tuple_pair = [
        -55.0,
        68.0,
        -55.0,
        71.0,
        -48.0,
        71.0,
        -48.0,
        68.0,
        -55.0,
        68.0,
    ]

    assert poly_tuple_pair._ext_type == "polygon"
    assert poly_tuple_pair._geom_file is None
    assert poly_tuple_pair.extent == expected_poly_tuple_pair


def test_numpy_intlist_latlon_coords():
    poly_list = spat.Spatial(np.array([-55, 68, -55, 71, -48, 71, -48, 68, -55, 68]))
    expected_poly_list = [
        -55.0,
        68.0,
        -55.0,
        71.0,
        -48.0,
        71.0,
        -48.0,
        68.0,
        -55.0,
        68.0,
    ]

    assert poly_list._ext_type == "polygon"
    assert poly_list._geom_file is None
    assert poly_list.extent == expected_poly_list


# ########## Polygon Assertion Error tests ############################################################
# (input for all of these tests is bad; ensuring the spatial class catches this)


def test_odd_num_lat_long_list_poly_throws_error():
    with pytest.raises(AssertionError):
        spat.Spatial([-55, 68, -55, 71, -48, 71, -48, 68, -55])


def test_wrong_num_lat_long_tuple_poly_throws_error():
    with pytest.raises(ValueError):
        spat.Spatial([(-55, 68, 69), (-55, 71), (-48, 71), (-48, 68), (-55, 68)])


def test_bad_value_types_poly():
    with pytest.raises(ValueError):
        spat.Spatial(["a", "b", "c", "d", "e"])


# ###################### Automatically Closed Polygon Tests ###########################################################


def test_poly_tuple_latlon_pairs_auto_close():
    poly_tuple_pair = spat.Spatial([(-55, 68), (-55, 71), (-48, 71), (-48, 68)])
    expected_poly_tuple_pair = [
        -55.0,
        68.0,
        -55.0,
        71.0,
        -48.0,
        71.0,
        -48.0,
        68.0,
        -55.0,
        68.0,
    ]

    assert poly_tuple_pair._ext_type == "polygon"
    assert poly_tuple_pair._geom_file is None
    assert poly_tuple_pair.extent == expected_poly_tuple_pair


def test_poly_list_auto_close():
    poly_list = spat.Spatial([-55, 68, -55, 71, -48, 71, -48, 68])
    expected_poly_list = [
        -55.0,
        68.0,
        -55.0,
        71.0,
        -48.0,
        71.0,
        -48.0,
        68.0,
        -55.0,
        68.0,
    ]

    assert poly_list._ext_type == "polygon"
    assert poly_list._geom_file is None
    assert poly_list.extent == expected_poly_list


# ###################### END POLYGON NO FILE TESTS ####################################################################

# ######### Geom File Input Tests ######################################################


def test_poly_file_simple_one_poly():
    poly_from_file = spat.Spatial(
        str(
            Path(
                "./doc/source/example_notebooks/supporting_files/simple_test_poly.gpkg"
            ).resolve()
        )
    )

    expected_poly = [-55.0, 68.0, -55.0, 71.0, -48.0, 71.0, -48.0, 68.0, -55.0, 68.0]

    assert poly_from_file._ext_type == "polygon"
    assert poly_from_file._geom_file is not None
    assert poly_from_file._geom_file == str(
        Path(
            "./doc/source/example_notebooks/supporting_files/simple_test_poly.gpkg"
        ).resolve()
    )
    assert poly_from_file.extent == expected_poly


# ########## Geom File Assertion Error tests ############################################################

# (input for all of these tests is bad; ensuring the spatial class catches this)


def test_bad_poly_inputfile_name_throws_error():
    with pytest.raises(AssertionError):
        spat.Spatial("bad_filename.gpkg")


def test_bad_poly_inputfile_type_throws_error():
    with pytest.raises(TypeError):
        spat.Spatial(str(Path("./icepyx/tests/unit/test_read.py").resolve()))


########## geodataframe ##########


def test_gdf_from_one_bbox():
    obs = spat.geodataframe("bounding_box", [-55, 68, -48, 71])
    geom = [Polygon(list(zip([-55, -55, -48, -48, -55], [68, 71, 71, 68, 68])))]
    exp = gpd.GeoDataFrame(geometry=geom)

    # make sure there is only one geometry before comparing them
    assert len(obs.geometry) == 1
    assert len(exp.geometry) == 1
    assert obs.geometry[0].equals(exp.geometry[0])


def test_gdf_from_multi_bbox():
    obs = spat.geodataframe("bounding_box", [-55, 68, -48, 71])
    geom = [Polygon(list(zip([-55, -55, -48, -48, -55], [68, 71, 71, 68, 68])))]
    exp = gpd.GeoDataFrame(geometry=geom)

    # make sure there is only one geometry before comparing them
    assert len(obs.geometry) == 1
    assert len(exp.geometry) == 1
    assert obs.geometry[0].equals(exp.geometry[0])


# Potential tests to include once multipolygon and complex polygons are handled

# def test_gdf_from_strpoly_one_simple():

# def test_gdf_from_strpoly_multi_simple():

# def test_gdf_from_strpoly_one_complex():

# def test_gdf_from_filepoly_one_simple():

# def test_gdf_from_filepoly_one_complex():

# def test_gdf_from_filepoly_multi_simple():


def test_bad_extent_type_input():
    ermsg = re.escape(
        r"Your spatial extent type (polybox) is not an accepted input and a geodataframe cannot be constructed"
    )
    with pytest.raises(TypeError, match=ermsg):
        spat.geodataframe("polybox", [1, 2, 3, 4])


# ###################### END GEOM FILE INPUT TESTS ####################################################################

# ######### Dateline Crossing Tests ######################################################


@pytest.mark.parametrize(
    "bbox",
    [[-55.5, 66.2, -64.2, 72.5], [1, -71, -1, -70]],
)
def test_bbox_crosses_dateline(bbox):
    obs = spat.check_dateline("bounding_box", bbox)
    exp = True
    assert exp == obs


@pytest.mark.parametrize(
    "bbox",
    [[-64.2, 66.2, 55.5, 72.5], [-55, 68, -48, 71], [-1, -71, 1, -70]],
)
def test_bbox_not_crosses_dateline(bbox):
    obs = spat.check_dateline("bounding_box", bbox)
    exp = False
    assert exp == obs


def test_poly_wrong_input():
    with pytest.raises(AssertionError):
        spat.check_dateline(
            "polygon",
            [[160, -45], [160, -40], [-170, -39], [-128, -40], [-128, -45], [160, -45]],
        )


def test_poly_crosses_dateline():
    obs = spat.check_dateline(
        "polygon", [160, -45, 160, -40, -170, -39, -128, -40, -128, -45, 160, -45]
    )
    exp = True
    assert exp == obs


# Note: users must manually specify their region crosses the dateline for regions spanning >90 longitude
def test_poly_not_crosses_dateline():
    obs = spat.check_dateline(
        "polygon", [-55, 68, -55, 71, -48, 71, -47, 70, -48, 68, -55, 68]
    )
    exp = False
    assert exp == obs


# ###################### END DATELINE CROSSING TESTS ####################################################################

# ######### CMR AND EGI API FORMATTING TESTS ######################################################


def test_bounding_box_fmt():
    bbox = spat.Spatial([-55, 68, -48, 71])
    obs = bbox.fmt_for_CMR()
    exp = "-55.0,68.0,-48.0,71.0"
    assert obs == exp


def test_bbox_fmt():
    bbox = spat.Spatial([-55, 68, -48, 71])
    obs = bbox.fmt_for_EGI()
    exp = "-55.0,68.0,-48.0,71.0"
    assert obs == exp


@pytest.fixture
def poly():
    coords = [
        [-86.622742, -74.908126],
        [-86.602149, -74.998483],
        [-86.671945, -74.999545],
        [-86.667881, -75.01762],
        [-86.737771, -75.018662],
        [-86.717729, -75.109052],
        [-86.788057, -75.110077],
        [-86.780144, -75.14624],
        [-86.850654, -75.147247],
        [-86.835058, -75.219586],
        [-86.905925, -75.220574],
        [-86.894389, -75.274839],
        [-86.965529, -75.27581],
        [-86.950368, -75.348177],
        [-87.021872, -75.349129],
        [-87.003154, -75.439609],
        [-87.075115, -75.440545],
        [-87.052886, -75.549149],
        [-86.98038, -75.548205],
        [-86.965004, -75.620616],
        [-87.037878, -75.621564],
        [-87.034102, -75.63967],
        [-86.961136, -75.63872],
        [-86.957257, -75.656825],
        [-86.884208, -75.655851],
        [-86.872234, -75.710165],
        [-86.945563, -75.711143],
        [-86.925871, -75.801686],
        [-86.999681, -75.802647],
        [-86.988029, -75.856983],
        [-87.062135, -75.857925],
        [-87.058326, -75.87604],
        [-87.132537, -75.876959],
        [-87.128815, -75.895075],
        [-87.203132, -75.895972],
        [-87.199496, -75.914091],
        [-87.273919, -75.914965],
        [-87.27037, -75.933086],
        [-87.344899, -75.933938],
        [-87.341438, -75.95206],
        [-87.490715, -75.953695],
        [-87.487439, -75.97182],
        [-87.562188, -75.972604],
        [-87.559001, -75.99073],
        [-87.633856, -75.991491],
        [-87.627653, -76.027748],
        [-87.777778, -76.029203],
        [-87.774861, -76.047334],
        [-87.925213, -76.048696],
        [-87.922485, -76.06683],
        [-87.997771, -76.067476],
        [-87.995135, -76.085611],
        [-88.070527, -76.086234],
        [-88.067983, -76.104371],
        [-88.143481, -76.104971],
        [-88.14103, -76.123109],
        [-88.216633, -76.123686],
        [-88.214276, -76.141826],
        [-88.365701, -76.142909],
        [-88.363537, -76.161051],
        [-88.439359, -76.161557],
        [-88.43729, -76.1797],
        [-88.513217, -76.180183],
        [-88.511244, -76.198328],
        [-88.587276, -76.198787],
        [-88.585399, -76.216933],
        [-88.737681, -76.217781],
        [-88.736001, -76.235929],
        [-88.81225, -76.236317],
        [-88.810667, -76.254466],
        [-88.887022, -76.254831],
        [-88.885537, -76.272981],
        [-88.961998, -76.273321],
        [-88.960611, -76.291473],
        [-89.037177, -76.29179],
        [-89.035889, -76.309942],
        [-89.112561, -76.310235],
        [-89.111372, -76.328389],
        [-89.264932, -76.328903],
        [-89.263946, -76.347058],
        [-89.340833, -76.347279],
        [-89.339947, -76.365434],
        [-89.41694, -76.365631],
        [-89.416155, -76.383788],
        [-89.493254, -76.383961],
        [-89.492571, -76.402118],
        [-89.569775, -76.402267],
        [-89.569195, -76.420425],
        [-89.723816, -76.420649],
        [-89.723443, -76.438808],
        [-89.800859, -76.438884],
        [-89.80059, -76.457044],
        [-89.878112, -76.457095],
        [-89.877947, -76.475255],
        [-89.955575, -76.475282],
        [-89.955514, -76.493443],
        [-90.033248, -76.493445],
        [-90.033293, -76.511607],
        [-90.111131, -76.511584],
        [-90.111283, -76.529747],
        [-90.345113, -76.52953],
        [-90.345583, -76.547693],
        [-90.42363, -76.547571],
        [-90.424208, -76.565734],
        [-90.50236, -76.565588],
        [-90.503734, -76.601916],
        [-90.582098, -76.601744],
        [-90.583695, -76.638075],
        [-90.662272, -76.637877],
        [-90.664093, -76.67421],
        [-90.742884, -76.673987],
        [-90.743907, -76.692154],
        [-90.822803, -76.691906],
        [-90.823937, -76.710073],
        [-91.060932, -76.709176],
        [-91.062397, -76.727343],
        [-91.536922, -76.72487],
        [-91.539047, -76.743034],
        [-91.697397, -76.742008],
        [-91.699746, -76.760171],
        [-91.779021, -76.759619],
        [-91.783959, -76.795946],
        [-91.863446, -76.795367],
        [-91.873848, -76.868024],
        [-91.793917, -76.868605],
        [-91.796424, -76.886772],
        [-91.716375, -76.887329],
        [-91.721186, -76.923666],
        [-91.640906, -76.924199],
        [-91.647835, -76.97871],
        [-91.325297, -76.980597],
        [-91.327166, -76.998771],
        [-91.165637, -76.999562],
        [-91.167283, -77.017738],
        [-91.086397, -77.018096],
        [-91.089474, -77.054451],
        [-91.008355, -77.054784],
        [-91.015545, -77.145686],
        [-91.178934, -77.144989],
        [-91.180618, -77.16317],
        [-91.426015, -77.16193],
        [-91.434206, -77.234653],
        [-92.092069, -77.230176],
        [-92.08907, -77.212001],
        [-92.335283, -77.209895],
        [-92.352136, -77.300761],
        [-92.269483, -77.301495],
        [-92.276054, -77.337847],
        [-92.193152, -77.338557],
        [-92.199521, -77.374914],
        [-92.282662, -77.374202],
        [-92.285981, -77.392381],
        [-92.369233, -77.391642],
        [-92.383091, -77.464357],
        [-92.466819, -77.463587],
        [-92.470431, -77.481766],
        [-92.386581, -77.482537],
        [-92.390081, -77.500717],
        [-92.138102, -77.502874],
        [-92.141243, -77.521058],
        [-91.972963, -77.522365],
        [-91.984627, -77.595116],
        [-91.899978, -77.595733],
        [-91.90279, -77.613923],
        [-91.4788, -77.616608],
        [-91.480993, -77.634803],
        [-91.14118, -77.636469],
        [-91.14799, -77.709264],
        [-91.062516, -77.709615],
        [-91.070502, -77.800626],
        [-90.812128, -77.801523],
        [-90.81335, -77.819728],
        [-90.727088, -77.819973],
        [-90.732603, -77.911009],
        [-90.81952, -77.910763],
        [-90.820765, -77.928971],
        [-90.90781, -77.928697],
        [-90.909191, -77.946905],
        [-90.822014, -77.94718],
        [-90.823267, -77.96539],
        [-90.735953, -77.965638],
        [-90.737076, -77.983849],
        [-90.824523, -77.983601],
        [-90.825784, -78.001812],
        [-90.91336, -78.001535],
        [-90.914759, -78.019746],
        [-91.090167, -78.019109],
        [-91.093515, -78.055531],
        [-91.181481, -78.05517],
        [-91.188783, -78.128018],
        [-91.365784, -78.127206],
        [-91.370017, -78.163631],
        [-91.458782, -78.163181],
        [-91.463317, -78.199607],
        [-91.552351, -78.199128],
        [-91.554767, -78.217341],
        [-91.643932, -78.216832],
        [-91.651645, -78.271472],
        [-91.830785, -78.270365],
        [-91.833652, -78.288578],
        [-92.013037, -78.287355],
        [-92.016194, -78.305566],
        [-92.106013, -78.30491],
        [-92.115968, -78.359544],
        [-92.025726, -78.360203],
        [-92.035347, -78.414844],
        [-91.944667, -78.415477],
        [-91.947751, -78.433693],
        [-91.856918, -78.434298],
        [-91.859867, -78.452516],
        [-91.76888, -78.453093],
        [-91.771695, -78.471312],
        [-91.680555, -78.471861],
        [-91.683233, -78.490081],
        [-91.591939, -78.490602],
        [-91.59703, -78.527046],
        [-91.505436, -78.52754],
        [-91.507847, -78.545764],
        [-91.324343, -78.546665],
        [-91.330738, -78.601343],
        [-91.238533, -78.601752],
        [-91.24053, -78.61998],
        [-91.14817, -78.62036],
        [-91.150024, -78.638589],
        [-90.872462, -78.639554],
        [-90.873874, -78.657786],
        [-90.781194, -78.658049],
        [-90.78246, -78.676281],
        [-90.689626, -78.676516],
        [-90.691868, -78.712982],
        [-90.598728, -78.713188],
        [-90.599703, -78.731422],
        [-90.506409, -78.731598],
        [-90.508064, -78.76807],
        [-90.414462, -78.768217],
        [-90.41582, -78.804691],
        [-90.32191, -78.804808],
        [-90.324034, -78.877764],
        [-90.229502, -78.877852],
        [-90.230262, -78.914333],
        [-90.040568, -78.914419],
        [-90.040635, -78.932661],
        [-89.94563, -78.932659],
        [-89.94554, -78.950901],
        [-89.850378, -78.950868],
        [-89.850129, -78.969111],
        [-89.754809, -78.969048],
        [-89.75399, -79.005535],
        [-89.562719, -79.005317],
        [-89.561988, -79.023561],
        [-89.466196, -79.023406],
        [-89.465302, -79.04165],
        [-89.273406, -79.041249],
        [-89.272187, -79.059493],
        [-88.983893, -79.05866],
        [-88.982186, -79.076903],
        [-89.1747, -79.07749],
        [-89.173311, -79.095734],
        [-89.269737, -79.095982],
        [-89.268506, -79.114228],
        [-89.365099, -79.114445],
        [-89.364027, -79.132691],
        [-89.460787, -79.132879],
        [-89.458959, -79.169374],
        [-89.55605, -79.16953],
        [-89.555296, -79.187779],
        [-89.652554, -79.187905],
        [-89.651963, -79.206154],
        [-89.749389, -79.20625],
        [-89.748962, -79.2245],
        [-89.846555, -79.224564],
        [-89.846293, -79.242815],
        [-90.041814, -79.24285],
        [-90.042029, -79.297606],
        [-90.140292, -79.297577],
        [-90.140775, -79.334083],
        [-90.042173, -79.334112],
        [-90.042319, -79.37062],
        [-90.141261, -79.370591],
        [-90.141505, -79.388846],
        [-90.240618, -79.388785],
        [-90.241873, -79.443552],
        [-90.341501, -79.443459],
        [-90.342693, -79.479973],
        [-90.442666, -79.479848],
        [-90.444995, -79.534621],
        [-90.545492, -79.534464],
        [-90.546451, -79.552722],
        [-90.445777, -79.55288],
        [-90.447349, -79.5894],
        [-91.053456, -79.587965],
        [-91.055316, -79.606223],
        [-91.257663, -79.605486],
        [-91.259887, -79.623743],
        [-91.361228, -79.623325],
        [-91.36364, -79.641582],
        [-91.465152, -79.641131],
        [-91.488897, -79.805457],
        [-91.695178, -79.804442],
        [-91.698235, -79.822701],
        [-91.801545, -79.822143],
        [-91.808067, -79.85866],
        [-91.704384, -79.85922],
        [-91.707475, -79.87748],
        [-91.811346, -79.876919],
        [-91.814637, -79.895179],
        [-91.918685, -79.894584],
        [-91.922176, -79.912843],
        [-92.026401, -79.912214],
        [-92.030095, -79.930472],
        [-92.134495, -79.929808],
        [-92.138393, -79.948066],
        [-92.347532, -79.946636],
        [-92.351826, -79.964891],
        [-92.456562, -79.964125],
        [-92.461064, -79.982379],
        [-92.565975, -79.981578],
        [-92.570685, -79.999832],
        [-92.78084, -79.998126],
        [-92.785952, -80.016376],
        [-92.891195, -80.015471],
        [-92.896519, -80.033721],
        [-93.001935, -80.032781],
        [-93.007473, -80.051029],
        [-93.113062, -80.050053],
        [-93.118814, -80.0683],
        [-93.224577, -80.067288],
        [-93.230546, -80.085534],
        [-93.336481, -80.084487],
        [-93.324176, -80.048001],
        [-93.429699, -80.046925],
        [-93.417099, -80.010444],
        [-93.522213, -80.009338],
        [-93.515756, -79.991101],
        [-93.620655, -79.989964],
        [-93.61403, -79.971729],
        [-93.718714, -79.97056],
        [-93.711924, -79.952328],
        [-93.816393, -79.951128],
        [-93.788723, -79.87821],
        [-93.892414, -79.876987],
        [-93.864399, -79.804083],
        [-93.967323, -79.802836],
        [-93.946026, -79.748169],
        [-93.843651, -79.749409],
        [-93.823125, -79.694739],
        [-93.924956, -79.693505],
        [-93.90411, -79.638844],
        [-94.005379, -79.637584],
        [-93.998302, -79.619367],
        [-94.099369, -79.618077],
        [-94.092139, -79.599863],
        [-94.193003, -79.598544],
        [-94.185623, -79.580332],
        [-94.386921, -79.577602],
        [-94.379215, -79.559395],
        [-94.680431, -79.555069],
        [-94.672229, -79.53687],
        [-94.772403, -79.535367],
        [-94.747448, -79.48078],
        [-94.847075, -79.479253],
        [-94.81352, -79.406486],
        [-94.912434, -79.404938],
        [-94.903948, -79.38675],
        [-95.101351, -79.383566],
        [-95.092557, -79.365384],
        [-95.191045, -79.363748],
        [-95.155505, -79.291032],
        [-95.253295, -79.289376],
        [-95.244321, -79.271201],
        [-95.341915, -79.269517],
        [-95.332806, -79.251344],
        [-95.430206, -79.249633],
        [-95.420964, -79.231464],
        [-95.323729, -79.233172],
        [-95.269903, -79.124145],
        [-95.366167, -79.122454],
        [-95.357141, -79.104287],
        [-95.453215, -79.102568],
        [-95.425842, -79.048076],
        [-95.616944, -79.044565],
        [-95.598218, -79.00825],
        [-95.693408, -79.006456],
        [-95.683935, -78.988302],
        [-95.588901, -78.990093],
        [-95.579615, -78.971937],
        [-95.484707, -78.973695],
        [-95.475607, -78.955536],
        [-95.380824, -78.957262],
        [-95.37191, -78.9391],
        [-95.466538, -78.937377],
        [-95.457498, -78.919218],
        [-95.551942, -78.917468],
        [-95.542778, -78.899312],
        [-95.637038, -78.897535],
        [-95.609268, -78.843079],
        [-95.515467, -78.844846],
        [-95.506423, -78.826692],
        [-95.412744, -78.828427],
        [-95.403881, -78.81027],
        [-95.310325, -78.811973],
        [-95.301642, -78.793813],
        [-95.114747, -78.797124],
        [-95.106394, -78.778959],
        [-95.013057, -78.780567],
        [-95.004882, -78.7624],
        [-94.911669, -78.763976],
        [-94.895698, -78.727637],
        [-94.988611, -78.726066],
        [-94.940425, -78.617072],
        [-95.032424, -78.615487],
        [-95.024337, -78.597325],
        [-95.207964, -78.594073],
        [-95.191285, -78.557761],
        [-95.465652, -78.552682],
        [-95.474413, -78.57083],
        [-95.748962, -78.565482],
        [-95.721466, -78.511065],
        [-95.812493, -78.509234],
        [-95.803243, -78.491098],
        [-96.075717, -78.48544],
        [-96.06607, -78.467314],
        [-96.156692, -78.465373],
        [-96.146934, -78.447251],
        [-96.327803, -78.44329],
        [-96.297869, -78.388943],
        [-96.387836, -78.386929],
        [-96.377781, -78.368817],
        [-96.467577, -78.366779],
        [-96.457416, -78.34867],
        [-96.547041, -78.346606],
        [-96.536773, -78.328501],
        [-96.80504, -78.32215],
        [-96.794392, -78.304055],
        [-96.883611, -78.301886],
        [-96.872859, -78.283794],
        [-96.961909, -78.2816],
        [-96.940233, -78.245425],
        [-97.028977, -78.243209],
        [-97.018054, -78.225125],
        [-97.19517, -78.220617],
        [-97.184011, -78.20254],
        [-97.272383, -78.200248],
        [-97.238713, -78.14603],
        [-97.326651, -78.14372],
        [-97.315364, -78.125651],
        [-97.403134, -78.123318],
        [-97.391749, -78.105253],
        [-97.566921, -78.10051],
        [-97.555308, -78.082453],
        [-97.64271, -78.080044],
        [-97.607693, -78.025883],
        [-97.520682, -78.02828],
        [-97.497773, -77.992166],
        [-97.410987, -77.994529],
        [-97.399713, -77.976468],
        [-97.313022, -77.9788],
        [-97.27979, -77.924608],
        [-97.193451, -77.926901],
        [-97.139363, -77.836566],
        [-96.967859, -77.841038],
        [-96.946954, -77.804891],
        [-96.861407, -77.80708],
        [-96.851127, -77.789004],
        [-96.765675, -77.791162],
        [-96.725358, -77.718845],
        [-96.640377, -77.720964],
        [-96.620645, -77.6848],
        [-96.535882, -77.686886],
        [-96.526184, -77.668801],
        [-96.441516, -77.670857],
        [-96.384656, -77.562336],
        [-96.552494, -77.558236],
        [-96.514174, -77.485919],
        [-96.59757, -77.483841],
        [-96.58794, -77.465766],
        [-96.671187, -77.463665],
        [-96.680937, -77.481738],
        [-97.263693, -77.466276],
        [-97.253111, -77.448226],
        [-97.336123, -77.445916],
        [-97.325453, -77.42787],
        [-97.491148, -77.423178],
        [-97.480274, -77.405139],
        [-97.397559, -77.407495],
        [-97.376139, -77.371411],
        [-97.293628, -77.373733],
        [-97.28308, -77.355688],
        [-98.433698, -77.320866],
        [-98.421564, -77.302872],
        [-98.666926, -77.294764],
        [-98.642079, -77.2588],
        [-99.049167, -77.244815],
        [-99.036233, -77.226854],
        [-99.522851, -77.209257],
        [-99.509284, -77.191321],
        [-99.832489, -77.179101],
        [-99.818518, -77.161182],
        [-99.979666, -77.154929],
        [-99.965515, -77.137019],
        [-100.447336, -77.117686],
        [-100.432572, -77.099804],
        [-100.512625, -77.096499],
        [-100.483005, -77.060743],
        [-100.642555, -77.054077],
        [-100.627593, -77.036208],
        [-100.707198, -77.032842],
        [-100.692171, -77.014978],
        [-100.851044, -77.008182],
        [-100.835847, -76.990327],
        [-100.915114, -76.986897],
        [-100.899853, -76.969047],
        [-101.058051, -76.962123],
        [-101.042622, -76.944282],
        [-101.121553, -76.940788],
        [-101.090613, -76.905114],
        [-101.169293, -76.901606],
        [-101.153783, -76.883774],
        [-101.232316, -76.880245],
        [-101.216746, -76.862418],
        [-101.295133, -76.85887],
        [-101.217404, -76.769752],
        [-101.295238, -76.766205],
        [-101.279717, -76.748385],
        [-101.357407, -76.744819],
        [-101.310795, -76.691373],
        [-101.388141, -76.687797],
        [-101.372587, -76.669986],
        [-101.449791, -76.666392],
        [-101.326063, -76.523929],
        [-101.402436, -76.52035],
        [-101.341168, -76.449131],
        [-101.265184, -76.45269],
        [-101.175067, -76.345822],
        [-101.250474, -76.342292],
        [-101.190803, -76.27106],
        [-101.265793, -76.267525],
        [-101.250878, -76.249721],
        [-101.325735, -76.246168],
        [-101.280944, -76.192769],
        [-101.429978, -76.185621],
        [-101.399941, -76.150039],
        [-101.474214, -76.14644],
        [-101.459161, -76.128654],
        [-101.533304, -76.125037],
        [-101.518198, -76.107255],
        [-101.59221, -76.10362],
        [-101.577051, -76.085842],
        [-101.650932, -76.082189],
        [-101.635722, -76.064416],
        [-101.709473, -76.060745],
        [-101.694211, -76.042976],
        [-101.767832, -76.039287],
        [-101.752518, -76.021523],
        [-101.899461, -76.014086],
        [-101.837882, -75.943066],
        [-101.910936, -75.939333],
        [-101.89555, -75.921582],
        [-101.968477, -75.917832],
        [-101.953041, -75.900085],
        [-102.02584, -75.896317],
        [-102.010356, -75.878575],
        [-102.083027, -75.87479],
        [-102.067494, -75.857052],
        [-102.140038, -75.853249],
        [-102.124457, -75.835516],
        [-102.196874, -75.831696],
        [-102.181245, -75.813967],
        [-102.253535, -75.810129],
        [-102.237859, -75.792406],
        [-102.310023, -75.78855],
        [-102.294299, -75.770832],
        [-102.366338, -75.766959],
        [-102.350567, -75.749245],
        [-102.494353, -75.741443],
        [-102.478451, -75.723738],
        [-102.693572, -75.711884],
        [-102.70973, -75.729573],
        [-102.853113, -75.72155],
        [-102.869482, -75.739229],
        [-102.941198, -75.735179],
        [-102.957693, -75.752851],
        [-103.029452, -75.748774],
        [-103.012872, -75.731107],
        [-103.227644, -75.718758],
        [-103.210852, -75.701106],
        [-103.282275, -75.696951],
        [-103.265441, -75.679303],
        [-103.336738, -75.675132],
        [-103.303027, -75.639846],
        [-103.445162, -75.631459],
        [-103.428203, -75.613826],
        [-103.923762, -75.583823],
        [-103.90627, -75.566227],
        [-103.976811, -75.56186],
        [-103.941793, -75.526678],
        [-104.012128, -75.5223],
        [-103.942283, -75.45195],
        [-103.914847, -75.426057],
        [-103.846549, -75.420428],
        [-103.814359, -75.41156],
        [-103.74731, -75.394972],
        [-103.643531, -75.376578],
        [-103.639472, -75.360155],
        [-103.549124, -75.339049],
        [-103.509054, -75.329656],
        [-103.456714, -75.307204],
        [-103.37484, -75.273725],
        [-103.284801, -75.264374],
        [-103.224839, -75.25812],
        [-103.182394, -75.249825],
        [-103.086408, -75.237813],
        [-103.042136, -75.231576],
        [-102.981295, -75.215486],
        [-102.956754, -75.210167],
        [-102.921448, -75.203018],
        [-102.898283, -75.198106],
        [-102.873449, -75.192921],
        [-102.84957, -75.188785],
        [-102.825705, -75.184646],
        [-102.789524, -75.181222],
        [-102.744295, -75.17242],
        [-102.656346, -75.16239],
        [-102.607491, -75.160775],
        [-102.560626, -75.159773],
        [-102.511333, -75.159268],
        [-102.378744, -75.152045],
        [-102.34262, -75.146716],
        [-102.266406, -75.132957],
        [-102.223828, -75.128342],
        [-102.157455, -75.12945],
        [-102.113853, -75.130386],
        [-102.068876, -75.13139],
        [-102.040635, -75.126691],
        [-102.013199, -75.12121],
        [-101.969076, -75.11627],
        [-101.953576, -75.113073],
        [-101.923326, -75.111044],
        [-101.896684, -75.109917],
        [-101.821333, -75.103337],
        [-101.766389, -75.098945],
        [-101.726414, -75.090073],
        [-101.723655, -75.079577],
        [-101.631989, -75.054005],
        [-101.564382, -75.02971],
        [-101.547244, -75.015213],
        [-101.531499, -75.000643],
        [-101.549303, -74.990901],
        [-101.489949, -74.940509],
        [-101.469959, -74.921526],
        [-101.455398, -74.908855],
        [-101.420557, -74.891146],
        [-101.399072, -74.882138],
        [-101.391177, -74.870096],
        [-101.371447, -74.860874],
        [-101.363063, -74.853621],
        [-101.338827, -74.838164],
        [-101.312982, -74.826333],
        [-101.29282, -74.816401],
        [-101.276851, -74.808624],
        [-101.27464, -74.804247],
        [-101.259243, -74.798558],
        [-101.251822, -74.792086],
        [-101.267741, -74.78708],
        [-101.256493, -74.781809],
        [-101.257733, -74.779767],
        [-101.250447, -74.777156],
        [-101.240613, -74.770054],
        [-101.222641, -74.763963],
        [-101.216307, -74.748673],
        [-101.212936, -74.740259],
        [-101.200426, -74.734469],
        [-101.197349, -74.72643],
        [-101.188725, -74.7179],
        [-101.207959, -74.716895],
        [-101.219968, -74.709239],
        [-101.232933, -74.706803],
        [-101.230248, -74.703234],
        [-101.238372, -74.70027],
        [-101.254074, -74.700252],
        [-101.275428, -74.693637],
        [-101.306089, -74.693851],
        [-101.351676, -74.691805],
        [-101.364701, -74.681592],
        [-101.396392, -74.67954],
        [-101.416381, -74.679976],
        [-101.462601, -74.674445],
        [-101.482989, -74.660146],
        [-101.530932, -74.656493],
        [-101.545802, -74.657827],
        [-101.570915, -74.655354],
        [-101.627933, -74.648117],
        [-101.647793, -74.639151],
        [-101.676385, -74.635907],
        [-101.678978, -74.633321],
        [-101.695894, -74.628422],
        [-101.728673, -74.621731],
        [-101.781287, -74.617603],
        [-101.794801, -74.615021],
        [-101.870395, -74.608983],
        [-101.933735, -74.601768],
        [-101.986726, -74.595483],
        [-102.032573, -74.595827],
        [-102.026749, -74.590285],
        [-102.010395, -74.580201],
        [-102.035597, -74.564212],
        [-102.090552, -74.553133],
        [-102.264411, -74.519626],
        [-102.339743, -74.51083],
        [-102.411915, -74.510518],
        [-102.424826, -74.497263],
        [-102.377212, -74.483896],
        [-102.280808, -74.473374],
        [-102.236421, -74.463717],
        [-102.185211, -74.450043],
        [-102.150282, -74.438359],
        [-102.110682, -74.429878],
        [-102.080455, -74.419386],
        [-102.029215, -74.421347],
        [-101.986657, -74.414487],
        [-101.942992, -74.405238],
        [-101.914922, -74.383364],
        [-101.795349, -74.369597],
        [-101.698034, -74.375051],
        [-101.572267, -74.390817],
        [-101.433665, -74.404266],
        [-101.358339, -74.410301],
        [-101.276679, -74.412744],
        [-101.200663, -74.403148],
        [-101.126055, -74.400282],
        [-101.050277, -74.385754],
        [-100.925725, -74.378623],
        [-100.827076, -74.373988],
        [-100.786332, -74.316362],
        [-100.72066, -74.319735],
        [-100.708238, -74.301973],
        [-100.642611, -74.305321],
        [-100.617997, -74.26979],
        [-100.552486, -74.273111],
        [-100.528129, -74.237572],
        [-100.462734, -74.240864],
        [-100.355131, -74.080906],
        [-100.290352, -74.084143],
        [-100.278602, -74.066367],
        [-100.213868, -74.06958],
        [-100.190588, -74.03402],
        [-100.125968, -74.037206],
        [-100.114438, -74.019422],
        [-100.049863, -74.022585],
        [-100.061323, -74.040372],
        [-99.996651, -74.043518],
        [-100.008066, -74.061309],
        [-99.943298, -74.064439],
        [-99.954667, -74.082234],
        [-99.889802, -74.085347],
        [-99.878504, -74.067549],
        [-99.68397, -74.076757],
        [-99.672911, -74.058947],
        [-99.218628, -74.079702],
        [-99.208094, -74.061869],
        [-98.688058, -74.08435],
        [-98.678122, -74.06649],
        [-98.026778, -74.092735],
        [-98.035988, -74.110626],
        [-97.774563, -74.120566],
        [-97.783502, -74.138469],
        [-97.521457, -74.148094],
        [-97.512812, -74.13018],
        [-97.447324, -74.132532],
        [-97.438772, -74.114615],
        [-97.242413, -74.121541],
        [-97.234101, -74.103616],
        [-97.103247, -74.108126],
        [-97.095101, -74.090197],
        [-97.02972, -74.092418],
        [-97.021665, -74.074486],
        [-96.825632, -74.08102],
        [-96.833465, -74.098959],
        [-96.768011, -74.101099],
        [-96.775789, -74.119041],
        [-96.513501, -74.127404],
        [-96.506019, -74.109452],
        [-96.374919, -74.113506],
        [-96.367602, -74.095549],
        [-96.302101, -74.097543],
        [-96.294875, -74.079584],
        [-96.229432, -74.081555],
        [-96.222295, -74.063595],
        [-96.156909, -74.065543],
        [-96.149863, -74.047581],
        [-95.95383, -74.053295],
        [-95.947021, -74.035326],
        [-95.816402, -74.039029],
        [-95.809755, -74.021057],
        [-95.679223, -74.024673],
        [-95.672738, -74.006697],
        [-95.542294, -74.010228],
        [-95.535971, -73.992248],
        [-95.405616, -73.995692],
        [-95.399454, -73.97771],
        [-95.26919, -73.981068],
        [-95.263189, -73.963082],
        [-95.133017, -73.966355],
        [-95.121348, -73.930376],
        [-95.056388, -73.931978],
        [-95.050646, -73.913988],
        [-94.985747, -73.915568],
        [-94.980091, -73.897576],
        [-94.915251, -73.899134],
        [-94.909681, -73.881141],
        [-94.844902, -73.882677],
        [-94.839417, -73.864683],
        [-94.774698, -73.866196],
        [-94.769297, -73.848201],
        [-94.704639, -73.849692],
        [-94.699323, -73.831696],
        [-94.634725, -73.833165],
        [-94.629493, -73.815168],
        [-94.564955, -73.816615],
        [-94.559808, -73.798617],
        [-94.430842, -73.801447],
        [-94.420869, -73.765446],
        [-94.356514, -73.766828],
        [-94.351616, -73.748827],
        [-94.287321, -73.750186],
        [-94.277701, -73.714183],
        [-94.213539, -73.715519],
        [-94.223015, -73.751526],
        [-94.158698, -73.752845],
        [-94.168073, -73.788858],
        [-94.103602, -73.79016],
        [-94.117527, -73.844188],
        [-94.052828, -73.845474],
        [-94.057417, -73.863487],
        [-93.992635, -73.864754],
        [-93.997163, -73.882768],
        [-93.5429, -73.89108],
        [-93.546925, -73.909105],
        [-93.416904, -73.911299],
        [-93.420791, -73.929327],
        [-93.095219, -73.934459],
        [-93.098746, -73.952494],
        [-93.033533, -73.95346],
        [-93.030081, -73.935424],
        [-92.117389, -73.946779],
        [-92.114979, -73.92873],
        [-92.049815, -73.929387],
        [-92.05215, -73.947436],
        [-91.921656, -73.948689],
        [-91.923848, -73.96674],
        [-91.793186, -73.967912],
        [-91.795233, -73.985966],
        [-91.729821, -73.986521],
        [-91.731798, -74.004576],
        [-91.666307, -74.005112],
        [-91.668214, -74.023169],
        [-91.077936, -74.027065],
        [-91.076703, -74.009003],
        [-91.011175, -74.009332],
        [-91.01002, -73.991272],
        [-90.879106, -73.991867],
        [-90.878103, -73.973806],
        [-90.812717, -73.974073],
        [-90.811791, -73.956012],
        [-90.746478, -73.956258],
        [-90.74733, -73.974319],
        [-90.551155, -73.974933],
        [-90.551785, -73.992995],
        [-90.486316, -73.993159],
        [-90.486872, -74.011222],
        [-90.290232, -74.011589],
        [-90.290565, -74.029653],
        [-90.159318, -74.029795],
        [-90.1595, -74.047861],
        [-90.028101, -74.04792],
        [-90.028133, -74.065986],
        [-89.830808, -74.065919],
        [-89.830418, -74.102053],
        [-89.764492, -74.10199],
        [-89.764221, -74.120058],
        [-89.69822, -74.119973],
        [-89.697523, -74.156112],
        [-89.63137, -74.156006],
        [-89.630517, -74.192147],
        [-89.564212, -74.19202],
        [-89.563707, -74.210092],
        [-89.430947, -74.209775],
        [-89.430287, -74.227847],
        [-89.29738, -74.227445],
        [-89.296564, -74.245518],
        [-89.230036, -74.245285],
        [-89.22914, -74.263358],
        [-89.162537, -74.263104],
        [-89.161562, -74.281178],
        [-89.028207, -74.280607],
        [-89.02594, -74.316754],
        [-88.892285, -74.316097],
        [-88.890991, -74.334171],
        [-88.82409, -74.333811],
        [-88.822715, -74.351885],
        [-88.688766, -74.3511],
        [-88.687231, -74.369174],
        [-88.620184, -74.368749],
        [-88.618567, -74.386824],
        [-88.484327, -74.38591],
        [-88.482549, -74.403984],
        [-88.348167, -74.402984],
        [-88.346228, -74.421057],
        [-88.278965, -74.420525],
        [-88.276942, -74.438598],
        [-88.142273, -74.437468],
        [-88.140087, -74.455541],
        [-88.072681, -74.454944],
        [-88.07041, -74.473017],
        [-87.935456, -74.471756],
        [-87.93302, -74.489828],
        [-87.865472, -74.489165],
        [-87.862952, -74.507237],
        [-87.79533, -74.506552],
        [-87.792724, -74.524624],
        [-87.65734, -74.523188],
        [-87.654567, -74.541259],
        [-87.586805, -74.540508],
        [-87.583946, -74.558579],
        [-87.51611, -74.557806],
        [-87.513164, -74.575876],
        [-87.241573, -74.572566],
        [-87.238298, -74.590633],
        [-87.034444, -74.587922],
        [-87.03092, -74.605986],
        [-86.962905, -74.605038],
        [-86.955671, -74.641167],
        [-86.887503, -74.640195],
        [-86.868859, -74.730522],
        [-86.800293, -74.729523],
        [-86.792609, -74.765656],
        [-86.723889, -74.764633],
        [-86.716003, -74.800766],
        [-86.647127, -74.799719],
        [-86.63091, -74.871988],
        [-86.561712, -74.870913],
        [-86.553377, -74.907049],
        [-86.622742, -74.908126],
    ]
    return spat.Spatial(coords)


@pytest.mark.skip(reason="Skipping this test for now, it fails with current polygons")
def test_polygon_fmt(poly):
    obs = poly.fmt_for_CMR()
    exp = "-86.622742,-74.908126,-86.561712,-74.870913,-86.868859,-74.730522,-86.962905,-74.605038,-89.02594,-74.316754,-89.630517,-74.192147,-89.830808,-74.065919,-90.746478,-73.956258,-91.668214,-74.023169,-92.049815,-73.929387,-93.420791,-73.929327,-93.997163,-73.882768,-94.277701,-73.714183,-95.133017,-73.966355,-96.513501,-74.127404,-99.889802,-74.085347,-100.114438,-74.019422,-100.355131,-74.080906,-100.462734,-74.240864,-100.827076,-74.373988,-101.795349,-74.369597,-102.424826,-74.497263,-101.188725,-74.7179,-101.564382,-75.02971,-103.37484,-75.273725,-103.914847,-75.426057,-104.012128,-75.5223,-103.029452,-75.748774,-102.350567,-75.749245,-101.837882,-75.943066,-101.899461,-76.014086,-101.280944,-76.192769,-101.325735,-76.246168,-101.190803,-76.27106,-101.250474,-76.342292,-101.175067,-76.345822,-101.402436,-76.52035,-101.326063,-76.523929,-101.449791,-76.666392,-101.310795,-76.691373,-101.357407,-76.744819,-101.217404,-76.769752,-101.295133,-76.85887,-101.058051,-76.962123,-100.447336,-77.117686,-98.433698,-77.320866,-97.28308,-77.355688,-97.491148,-77.423178,-96.514174,-77.485919,-96.552494,-77.558236,-96.384656,-77.562336,-96.441516,-77.670857,-97.139363,-77.836566,-97.193451,-77.926901,-97.64271,-78.080044,-96.297869,-78.388943,-96.327803,-78.44329,-95.721466,-78.511065,-95.748962,-78.565482,-94.940425,-78.617072,-94.988611,-78.726066,-94.911669,-78.763976,-95.609268,-78.843079,-95.637038,-78.897535,-95.37191,-78.9391,-95.693408,-79.006456,-95.269903,-79.124145,-95.323729,-79.233172,-95.430206,-79.249633,-95.155505,-79.291032,-95.191045,-79.363748,-94.81352,-79.406486,-94.847075,-79.479253,-94.747448,-79.48078,-94.772403,-79.535367,-93.90411,-79.638844,-93.843651,-79.749409,-93.967323,-79.802836,-93.788723,-79.87821,-93.816393,-79.951128,-93.230546,-80.085534,-91.707475,-79.87748,-91.801545,-79.822143,-91.488897,-79.805457,-91.465152,-79.641131,-90.447349,-79.5894,-90.545492,-79.534464,-90.042319,-79.37062,-90.140775,-79.334083,-90.041814,-79.24285,-88.982186,-79.076903,-90.230262,-78.914333,-90.32191,-78.804808,-90.689626,-78.676516,-91.150024,-78.638589,-92.035347,-78.414844,-92.106013,-78.30491,-91.651645,-78.271472,-91.365784,-78.127206,-91.188783,-78.128018,-91.090167,-78.019109,-90.737076,-77.983849,-90.909191,-77.946905,-90.732603,-77.911009,-90.727088,-77.819973,-91.070502,-77.800626,-91.14118,-77.636469,-91.90279,-77.613923,-91.984627,-77.595116,-91.972963,-77.522365,-92.466819,-77.463587,-92.199521,-77.374914,-92.352136,-77.300761,-92.335283,-77.209895,-91.434206,-77.234653,-91.426015,-77.16193,-91.015545,-77.145686,-91.008355,-77.054784,-91.086397,-77.018096,-91.647835,-76.97871,-91.640906,-76.924199,-91.873848,-76.868024,-91.779021,-76.759619,-90.823937,-76.710073,-90.345113,-76.52953,-86.988029,-75.856983,-86.945563,-75.711143,-86.872234,-75.710165,-87.034102,-75.63967,-86.965004,-75.620616,-87.075115,-75.440545,-87.003154,-75.439609,-87.021872,-75.349129,-86.835058,-75.219586,-86.850654,-75.147247,-86.717729,-75.109052,-86.737771,-75.018662,-86.602149,-74.998483,-86.622742,-74.908126"
    assert obs == exp


def test_boundingshape_fmt(poly):
    obs = poly.fmt_for_EGI()
    # Same as CMR
    exp = "-86.622742,-74.908126,-86.561712,-74.870913,-86.868859,-74.730522,-86.962905,-74.605038,-89.02594,-74.316754,-89.630517,-74.192147,-89.830808,-74.065919,-90.746478,-73.956258,-91.668214,-74.023169,-92.049815,-73.929387,-93.420791,-73.929327,-93.997163,-73.882768,-94.277701,-73.714183,-95.133017,-73.966355,-96.513501,-74.127404,-99.889802,-74.085347,-100.114438,-74.019422,-100.355131,-74.080906,-100.462734,-74.240864,-100.827076,-74.373988,-101.795349,-74.369597,-102.424826,-74.497263,-101.188725,-74.7179,-101.564382,-75.02971,-103.37484,-75.273725,-103.914847,-75.426057,-104.012128,-75.5223,-103.029452,-75.748774,-102.350567,-75.749245,-101.837882,-75.943066,-101.899461,-76.014086,-101.280944,-76.192769,-101.325735,-76.246168,-101.190803,-76.27106,-101.250474,-76.342292,-101.175067,-76.345822,-101.402436,-76.52035,-101.326063,-76.523929,-101.449791,-76.666392,-101.310795,-76.691373,-101.357407,-76.744819,-101.217404,-76.769752,-101.295133,-76.85887,-101.058051,-76.962123,-100.447336,-77.117686,-98.433698,-77.320866,-97.28308,-77.355688,-97.491148,-77.423178,-96.514174,-77.485919,-96.552494,-77.558236,-96.384656,-77.562336,-96.441516,-77.670857,-97.139363,-77.836566,-97.193451,-77.926901,-97.64271,-78.080044,-96.297869,-78.388943,-96.327803,-78.44329,-95.721466,-78.511065,-95.748962,-78.565482,-94.940425,-78.617072,-94.988611,-78.726066,-94.911669,-78.763976,-95.609268,-78.843079,-95.637038,-78.897535,-95.37191,-78.9391,-95.693408,-79.006456,-95.269903,-79.124145,-95.323729,-79.233172,-95.430206,-79.249633,-95.155505,-79.291032,-95.191045,-79.363748,-94.81352,-79.406486,-94.847075,-79.479253,-94.747448,-79.48078,-94.772403,-79.535367,-93.90411,-79.638844,-93.843651,-79.749409,-93.967323,-79.802836,-93.788723,-79.87821,-93.816393,-79.951128,-93.230546,-80.085534,-91.707475,-79.87748,-91.801545,-79.822143,-91.488897,-79.805457,-91.465152,-79.641131,-90.447349,-79.5894,-90.545492,-79.534464,-90.042319,-79.37062,-90.140775,-79.334083,-90.041814,-79.24285,-88.982186,-79.076903,-90.230262,-78.914333,-90.32191,-78.804808,-90.689626,-78.676516,-91.150024,-78.638589,-92.035347,-78.414844,-92.106013,-78.30491,-91.651645,-78.271472,-91.365784,-78.127206,-91.188783,-78.128018,-91.090167,-78.019109,-90.737076,-77.983849,-90.909191,-77.946905,-90.732603,-77.911009,-90.727088,-77.819973,-91.070502,-77.800626,-91.14118,-77.636469,-91.90279,-77.613923,-91.984627,-77.595116,-91.972963,-77.522365,-92.466819,-77.463587,-92.199521,-77.374914,-92.352136,-77.300761,-92.335283,-77.209895,-91.434206,-77.234653,-91.426015,-77.16193,-91.015545,-77.145686,-91.008355,-77.054784,-91.086397,-77.018096,-91.647835,-76.97871,-91.640906,-76.924199,-91.873848,-76.868024,-91.779021,-76.759619,-90.823937,-76.710073,-90.345113,-76.52953,-86.988029,-75.856983,-86.945563,-75.711143,-86.872234,-75.710165,-87.034102,-75.63967,-86.965004,-75.620616,-87.075115,-75.440545,-87.003154,-75.439609,-87.021872,-75.349129,-86.835058,-75.219586,-86.850654,-75.147247,-86.717729,-75.109052,-86.737771,-75.018662,-86.602149,-74.998483,-86.622742,-74.908126"
    assert obs == exp
