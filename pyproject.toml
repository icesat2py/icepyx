[project]
name = "icepyx"
description = "Python tools for obtaining and working with ICESat-2 data"
license = {file = "LICENSE"}
readme = "README.rst"

requires-python = ">=3.11"
dynamic = ["version", "dependencies"]

authors = [
  {name = "The icepyx Developers", email = "jbscheick@gmail.com"},
]
maintainers = [
  {name = "The icepyx Developers", email = "jbscheick@gmail.com"},
]

classifiers=[
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: GIS",
  "Topic :: Software Development :: Libraries",
]

[project.urls]
Homepage = "https://icepyx.readthedocs.io"
Documentation = "https://icepyx.readthedocs.io"
Repository = "https://github.com/icesat2py/icepyx"
Issues = "https://github.com/icesat2py/icepyx/issues"
Changelog = "https://icepyx.readthedocs.io/en/latest/user_guide/changelog/index.html"


[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=66", "wheel", "setuptools_scm"]

[tool.setuptools]
py-modules = ["_icepyx_version"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}

[project.optional-dependencies]
viz = ["geoviews >= 1.9.0", "cartopy >= 0.18.0", "scipy"]
complete = ["icepyx[viz]"]

[tool.setuptools.packages.find]
exclude = ["*tests"]

[tool.setuptools_scm]
version_file = "_icepyx_version.py"
version_file_template = 'version = "{version}"'
local_scheme = "node-and-date"
fallback_version = "unknown"

[tool.codespell]
ignore-words-list = "aas,socio-economic,toi"

[tool.ruff]
# DevGoal: Lint and format all Jupyter Notebooks, remove below.
extend-exclude = ["*.ipynb"]

# [tool.ruff.format]
# docstring-code-format = true
# docstring-code-line-length = "dynamic"


[tool.ruff.lint]
# DevGoal: Enable "ARG" and "B" rulesets ASAP!
select = [
  # "ARG",  # flake8-unused-arguments
  # "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "E",    # pycodestyle
  # "EM",   # flake8-errmsg
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "NPY",  # NumPy specific rules
  # "PD",   # pandas-vet
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  # "PL",   # pylint
  # "PT",   # flake8-pytest-style
  # "PTH",  # flake8-use-pathlib
  # "RET",  # flake8-return
  # "RUF",  # Ruff-specific
  "SIM",  # flake8-simplify
  # "T20",  # flake8-print
  # "UP",   # pyupgrade
  "YTT",  # flake8-2020
]
ignore = [
  # Line too long
  # NOTE: This is a formatting concern. Formatter handles long lines of code,
  # but allows inline comments to be infinitely long (automatically formatting
  # them can have unintended consequences). In our codebase, we have a lot of
  # overlong comments.
  # See: https://github.com/psf/black/issues/1713#issuecomment-1357045092
  "E501",
  "SIM105",  # suppressible-exception
]

[tool.ruff.lint.per-file-ignores]
# Ignore import violations in all `__init__.py` files and doc config
"__init__.py" = ["E402", "F401"]
"doc/source/conf.py" = ["E402", "F401"]

# Ignore line length in test file containing some very long test strings
"test_granules.py" = ["E501"]
"test_spatial.py" = ["E501"]

# Ignore too many leading '#' for block comment
"*/tests/*" = ["E266"]

[tool.ruff.lint.isort]
force-sort-within-sections = true


[tool.pyright]
pythonVersion = "3.11"
# DevGoal: "strict"
typeCheckingMode = "standard"
include = [
  "icepyx",
]
exclude = [
  "**/__pycache__",
  "icepyx/tests",
]
# DevGoal: Remove all ignores
ignore = [
  "icepyx/quest/*",
  "icepyx/core/auth.py",
  "icepyx/core/is2ref.py",
  "icepyx/core/read.py",
  "icepyx/core/spatial.py",
  "icepyx/core/variables.py",
  "icepyx/core/visualization.py",
]
